{"version":3,"sources":["is_plain_object.es6"],"names":["plain","TYPE_RE_","type","value","String","match","exec","Object","prototype","toString","call","toLowerCase","hasOwn","key","hasOwnProperty","isPlainObject","nodeType","window","constructor","e","undefined"],"mappings":";;;;;AAAA;;;;;AAKA;;;;;;;;AAQO,IAAIA,wBAAQ,EAAZ;;AAEP;;;;;;AAMAA,MAAMC,QAAN,GACI,+DADJ;;AAIA;;;;;;;;;;;;;;;;;;;;AAoBAD,MAAME,IAAN,GAAa,UAASC,KAAT,EAAgB;AAC3B,MAAIA,SAAS,IAAb,EAAmB,OAAOC,OAAOD,KAAP,CAAP;AACnB,MAAIE,QAAQL,MAAMC,QAAN,CAAeK,IAAf,CACRC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BH,OAAOJ,KAAP,CAA/B,CADQ,CAAZ;AAEA,MAAIE,KAAJ,EAAW,OAAOA,MAAM,CAAN,EAASM,WAAT,EAAP;AACX,SAAO,QAAP;AACD,CAND;;AASA;;;;;;;AAOAX,MAAMY,MAAN,GAAe,UAAST,KAAT,EAAgBU,GAAhB,EAAqB;AAClC,SAAON,OAAOC,SAAP,CAAiBM,cAAjB,CAAgCJ,IAAhC,CAAqCH,OAAOJ,KAAP,CAArC,EAAoDU,GAApD,CAAP;AACD,CAFD;;AAKA;;;;;;;;AAQAb,MAAMe,aAAN,GAAsB,UAASZ,KAAT,EAAgB;AACpC,MAAI,CAACA,KAAD,IAAUH,MAAME,IAAN,CAAWC,KAAX,KAAqB,QAA/B,IAA8C;AAC9CA,QAAMa,QADN,IAC8C;AAC9Cb,WAASA,MAAMc,MAFnB,EAE2B;AAAuB;AAChD,WAAO,KAAP;AACD;AACD,MAAI;AACF;AACA;AACA;AACA,QAAId,MAAMe,WAAN,IAAqB,CAAClB,MAAMY,MAAN,CAAaT,KAAb,EAAoB,aAApB,CAAtB,IACA,CAACH,MAAMY,MAAN,CAAaT,MAAMe,WAAN,CAAkBV,SAA/B,EAA0C,eAA1C,CADL,EACiE;AAC/D,aAAO,KAAP;AACD;AACF,GARD,CAQE,OAAOW,CAAP,EAAU;AACV;AACA;AACA;AACA,WAAO,KAAP;AACD;AACD;AACA;AACA;AACA,MAAIN,GAAJ;AACA,OAAKA,GAAL,IAAYV,KAAZ,EAAmB,CAAE;AACrB,SAAOU,QAAQO,SAAR,IAAqBpB,MAAMY,MAAN,CAAaT,KAAb,EAAoBU,GAApB,CAA5B;AACD,CA1BD","file":"is_plain_object.js","sourcesContent":["/**\n * @license jQuery v1.9.1 (c) 2005, 2012\n * jQuery Foundation, Inc. jquery.org/license.\n */\n\n/**\n * @fileoverview Utility for categorizing JavaScript objects. The code in the\n * isPlainObject function was inspired by similar code in jQuery (hence the\n * above copyright notice).\n *\n * @author bkuhn@google.com (Brian Kuhn)\n */\n\nexport var plain = {};\n\n/**\n * Pattern used by plain.type to match [object XXX] strings.\n * @type {RegExp}\n * @private\n * @const\n */\nplain.TYPE_RE_ =\n    /\\[object (Boolean|Number|String|Function|Array|Date|RegExp)\\]/;\n\n\n/**\n * Returns a string describing the given value's type. Same as typeof, except\n * in these cases (assuming the value's typeof() method has not been modified):\n *\n *     value         |  typeof   |  type\n *    ======================================\n *     null          |  object   |  null\n *     new Boolean() |  object   |  boolean\n *     new Number()  |  object   |  number\n *     new String()  |  object   |  string\n *     new Date()    |  object   |  date\n *     [1,2,3]       |  object   |  array\n *     /.+/          |  object   |  regexp\n *\n * This method is also more reliable for detecting the type of objects created\n * in another window.\n *\n * @param {*} value The value to extract the type information from.\n * @return {string} The name of the given value's type.\n */\nplain.type = function(value) {\n  if (value == null) return String(value);\n  var match = plain.TYPE_RE_.exec(\n      Object.prototype.toString.call(Object(value)));\n  if (match) return match[1].toLowerCase();\n  return 'object';\n};\n\n\n/**\n * Determines if the value has a non-inherited property with the given key.\n *\n * @param {*} value The value to test.\n * @param {string} key The property name to look for.\n * @return {boolean} True iff the property exists.\n */\nplain.hasOwn = function(value, key) {\n  return Object.prototype.hasOwnProperty.call(Object(value), key);\n};\n\n\n/**\n * Determines if the given value is a \"plain\" object, meaning it's an object\n * with no inherited properties that isn't a null, date, regexp, array,\n * DOM node, or window object.\n *\n * @param {*} value The value to test.\n * @return {boolean} True iff the given value is a \"plain\" object.\n */\nplain.isPlainObject = function(value) {\n  if (!value || plain.type(value) != 'object' ||    // Nulls, dates, etc.\n      value.nodeType ||                             // DOM nodes.\n      value == value.window) {                      // Window objects.\n    return false;\n  }\n  try {\n    // According to jQuery, we must check for the presence of the constructor\n    // property in IE. If the constructor property is inherited and isn't an\n    // Object, this isn't a plain object.\n    if (value.constructor && !plain.hasOwn(value, 'constructor') &&\n        !plain.hasOwn(value.constructor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  } catch (e) {\n    // Some objects will throw an exception when you try to access their\n    // constructor. These are never plain objects.\n    // See http://bugs.jquery.com/ticket/9897.\n    return false;\n  }\n  // Lastly, we check that all properties are non-inherited.\n  // According to jQuery, inherited properties are always enumerated last, so\n  // it's safe to only check the last enumerated property.\n  var key;\n  for (key in value) {}\n  return key === undefined || plain.hasOwn(value, key);\n};\n"]}