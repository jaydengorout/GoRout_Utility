{"version":3,"sources":["index.es6"],"names":["decorators","bottle","currentContext","root","localStorage","strict","ws","sessionStorage","service","constant","alias","name","aliasClosure","apply","arguments","factory","container"],"mappings":";;;;;;;AAKA;;;;AACA;;AACA;;IAAYA,U;;AACZ;;;;AACA;;;;AACA;;;;;;;;AAVA;;;;;AAYA,IAAMC,SAAS,wBAAf;;AAEA,IAAMC,iBAAkB,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AACpD,SAAO,YAAW;AAChB,QAAI,OAAOA,IAAP,IAAgB,WAApB,EAAiC;AAC/BA,WAAKC,YAAL,GAAoB,yBAAY,WAAZ,EAAyB,EAAEC,QAAQ,KAAV,EAAiBC,IAAI,IAArB,EAAzB,CAApB;AACAH,WAAKI,cAAL,GAAsB,yBAAY,IAAZ,EAAkB,EAAEF,QAAQ,IAAV,EAAlB,CAAtB;AACD;AACD,WAAOF,IAAP;AACD,GAND;AAOD,CARsB,WAAvB;;AAUAF,OAAOO,OAAP,CAAe,MAAf,EAAuBN,cAAvB;;AAEAD,OAAOQ,QAAP,CAAgB,GAAhB;;AAEAR,OAAOQ,QAAP,CAAgB,YAAhB,EAA8BT,UAA9B;;AAEAC,OAAOQ,QAAP,CAAgB,iBAAhB;;AAEAR,OAAOQ,QAAP,CAAgB,UAAhB;;AAGAR,OAAOO,OAAP,CAAe,OAAf,EAAwB,YAAW;AACjC;;;;;;;AAOA,MAAME,QAAQ,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACjC,WAAO,SAASC,YAAT,GAAwB;AAC7B,aAAO,KAAKD,IAAL,EAAWE,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB,CAAP;AACD,KAFD;AAGD,GAJD;;AAMA;;AAEA,SAAOJ,KAAP;AACD,CAjBD;;AAmBAT,OAAOc,OAAP,CAAe,cAAf,EAA+B,UAASC,SAAT,EAAoB,CAElD,CAFD;;AAIA;;;;AAIO,IAAIA,gCAAYf,OAAOe,SAAvB","file":"index.js","sourcesContent":["/**\n * Created by jayde on 12/26/2016.\n * @module cont\n */\n\nimport Bottle from 'bottlejs'\nimport {_} from 'underscore'\nimport * as decorators from 'core-decorators'\nimport helper from './helper'\nimport firebase from './firebase'\nimport Storage from 'dom-storage'\n\nconst bottle = new Bottle()\n\nconst currentContext = (function currentContext(root) {\n  return function() {\n    if (typeof(root) == 'undefined') {\n      root.localStorage = new Storage('./db.json', { strict: false, ws: '  ' })\n      root.sessionStorage = new Storage(null, { strict: true })\n    }\n    return root\n  }\n})(this)\n\nbottle.service('root', currentContext)\n\nbottle.constant('_', _)\n\nbottle.constant('decorators', decorators)\n\nbottle.constant('DataLayerHelper', helper)\n\nbottle.constant('firebase', firebase)\n\n\nbottle.service('alias', function() {\n  /**\n   * Alias a method while keeping the context correct, to allow for overwriting of target method.\n   *\n   * @param {String} name The name of the target method.\n   * @return {Function} The aliased method\n   * @api private\n   */\n  const alias = function alias(name) {\n    return function aliasClosure() {\n      return this[name].apply(this, arguments)\n    }\n  }\n\n  /** alias\n   * @see alias */\n  return alias\n})\n\nbottle.factory('localStorage', function(container) {\n\n})\n\n/**\n * Container with saved state objects\n * @type {Bottle.IContainer}\n */\nexport let container = bottle.container"]}